// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

/*
Package src is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	EchoMessage
*/
package src

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoMessage struct {
	// msg is a message.
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *EchoMessage) Reset()                    { *m = EchoMessage{} }
func (m *EchoMessage) String() string            { return proto.CompactTextString(m) }
func (*EchoMessage) ProtoMessage()               {}
func (*EchoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoMessage)(nil), "src.EchoMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UtilService service

type UtilServiceClient interface {
	Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error)
}

type utilServiceClient struct {
	cc *grpc.ClientConn
}

func NewUtilServiceClient(cc *grpc.ClientConn) UtilServiceClient {
	return &utilServiceClient{cc}
}

func (c *utilServiceClient) Echo(ctx context.Context, in *EchoMessage, opts ...grpc.CallOption) (*EchoMessage, error) {
	out := new(EchoMessage)
	err := grpc.Invoke(ctx, "/src.UtilService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UtilService service

type UtilServiceServer interface {
	Echo(context.Context, *EchoMessage) (*EchoMessage, error)
}

func RegisterUtilServiceServer(s *grpc.Server, srv UtilServiceServer) {
	s.RegisterService(&_UtilService_serviceDesc, srv)
}

func _UtilService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/src.UtilService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServiceServer).Echo(ctx, req.(*EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "src.UtilService",
	HandlerType: (*UtilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _UtilService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2e, 0x4a, 0x96, 0x92, 0x49,
	0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49,
	0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0x28, 0x51, 0x92, 0xe7, 0xe2, 0x76, 0x4d, 0xce, 0xc8, 0xf7,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe0, 0x62, 0xce, 0x2d, 0x4e, 0x97, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x8d, 0xfc, 0xb9, 0xb8, 0x43, 0x4b, 0x32, 0x73, 0x82, 0x53,
	0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x1c, 0xb8, 0x58, 0x40, 0xea, 0x85, 0x04, 0xf4, 0x8a, 0x8b,
	0x92, 0xf5, 0x90, 0xb4, 0x4a, 0x61, 0x88, 0x28, 0x89, 0x34, 0x5d, 0x7e, 0x32, 0x99, 0x89, 0x4f,
	0x89, 0x13, 0x6c, 0x77, 0x6a, 0x72, 0x46, 0xbe, 0x15, 0xa3, 0x96, 0x93, 0x7c, 0x94, 0x6c, 0x7a,
	0x7e, 0x41, 0x46, 0x6a, 0x51, 0xb1, 0x5e, 0x66, 0x8a, 0x7e, 0x71, 0x4e, 0x66, 0x4a, 0x6a, 0xb1,
	0xbe, 0xa1, 0x99, 0x6e, 0x7a, 0x51, 0x41, 0xb2, 0x7e, 0x71, 0x51, 0x72, 0x12, 0x1b, 0xd8, 0x65,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xbf, 0x43, 0x94, 0xcc, 0x00, 0x00, 0x00,
}

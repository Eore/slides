// Code generated by protoc-gen-go.
// source: profile.proto
// DO NOT EDIT!

package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProfileMessage_ProfileType int32

const (
	ProfileMessage_USER  ProfileMessage_ProfileType = 0
	ProfileMessage_ADMIN ProfileMessage_ProfileType = 1
)

var ProfileMessage_ProfileType_name = map[int32]string{
	0: "USER",
	1: "ADMIN",
}
var ProfileMessage_ProfileType_value = map[string]int32{
	"USER":  0,
	"ADMIN": 1,
}

func (x ProfileMessage_ProfileType) String() string {
	return proto.EnumName(ProfileMessage_ProfileType_name, int32(x))
}
func (ProfileMessage_ProfileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{2, 0}
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type IDMessage struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IDMessage) Reset()                    { *m = IDMessage{} }
func (m *IDMessage) String() string            { return proto.CompactTextString(m) }
func (*IDMessage) ProtoMessage()               {}
func (*IDMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ProfileMessage struct {
	Id          string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ProfileType ProfileMessage_ProfileType `protobuf:"varint,2,opt,name=profile_type,json=profileType,enum=helloworld.ProfileMessage_ProfileType" json:"profile_type,omitempty"`
	Name        string                     `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *ProfileMessage) Reset()                    { *m = ProfileMessage{} }
func (m *ProfileMessage) String() string            { return proto.CompactTextString(m) }
func (*ProfileMessage) ProtoMessage()               {}
func (*ProfileMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "helloworld.EmptyMessage")
	proto.RegisterType((*IDMessage)(nil), "helloworld.IDMessage")
	proto.RegisterType((*ProfileMessage)(nil), "helloworld.ProfileMessage")
	proto.RegisterEnum("helloworld.ProfileMessage_ProfileType", ProfileMessage_ProfileType_name, ProfileMessage_ProfileType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for ProfileService service

type ProfileServiceClient interface {
	// List returns all available profiles associated with the account.
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ProfileService_ListClient, error)
	// Get
	Get(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*ProfileMessage, error)
	// Update saves profile.
	Update(ctx context.Context, in *ProfileMessage, opts ...grpc.CallOption) (*IDMessage, error)
}

type profileServiceClient struct {
	cc *grpc.ClientConn
}

func NewProfileServiceClient(cc *grpc.ClientConn) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (ProfileService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProfileService_serviceDesc.Streams[0], c.cc, "/helloworld.ProfileService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileService_ListClient interface {
	Recv() (*ProfileMessage, error)
	grpc.ClientStream
}

type profileServiceListClient struct {
	grpc.ClientStream
}

func (x *profileServiceListClient) Recv() (*ProfileMessage, error) {
	m := new(ProfileMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileServiceClient) Get(ctx context.Context, in *IDMessage, opts ...grpc.CallOption) (*ProfileMessage, error) {
	out := new(ProfileMessage)
	err := grpc.Invoke(ctx, "/helloworld.ProfileService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *ProfileMessage, opts ...grpc.CallOption) (*IDMessage, error) {
	out := new(IDMessage)
	err := grpc.Invoke(ctx, "/helloworld.ProfileService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProfileService service

type ProfileServiceServer interface {
	// List returns all available profiles associated with the account.
	List(*EmptyMessage, ProfileService_ListServer) error
	// Get
	Get(context.Context, *IDMessage) (*ProfileMessage, error)
	// Update saves profile.
	Update(context.Context, *ProfileMessage) (*IDMessage, error)
}

func RegisterProfileServiceServer(s *grpc.Server, srv ProfileServiceServer) {
	s.RegisterService(&_ProfileService_serviceDesc, srv)
}

func _ProfileService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileServiceServer).List(m, &profileServiceListServer{stream})
}

type ProfileService_ListServer interface {
	Send(*ProfileMessage) error
	grpc.ServerStream
}

type profileServiceListServer struct {
	grpc.ServerStream
}

func (x *profileServiceListServer) Send(m *ProfileMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(IDMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfileServiceServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProfileMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ProfileServiceServer).Update(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProfileService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _ProfileService_List_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor1 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x28, 0xca, 0x4f,
	0xcb, 0xcc, 0x49, 0xd5, 0x03, 0xd2, 0x25, 0xf9, 0x42, 0x5c, 0x19, 0xa9, 0x39, 0x39, 0xf9, 0xe5,
	0xf9, 0x45, 0x39, 0x29, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99,
	0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x95, 0x4a, 0x7c,
	0x5c, 0x3c, 0xae, 0xb9, 0x05, 0x25, 0x95, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x4a, 0xd2,
	0x5c, 0x9c, 0x9e, 0x2e, 0x50, 0x8e, 0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x90, 0xa5, 0xb4, 0x98, 0x91, 0x8b, 0x2f, 0x00, 0x62, 0x11, 0x0e, 0x25, 0x42,
	0x9e, 0x5c, 0x3c, 0x50, 0xa7, 0xc4, 0x97, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x01, 0x65, 0xf8, 0x8c,
	0xd4, 0xf4, 0x10, 0x0e, 0xd2, 0x43, 0x35, 0x01, 0xc6, 0x0d, 0x01, 0xaa, 0x0e, 0xe2, 0x2e, 0x40,
	0x70, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc1, 0x86, 0x83, 0xd9, 0x4a,
	0x4a, 0x5c, 0xdc, 0x48, 0xea, 0x85, 0x38, 0xb8, 0x58, 0x42, 0x83, 0x5d, 0x83, 0x04, 0x18, 0x84,
	0x38, 0xb9, 0x58, 0x1d, 0x5d, 0x7c, 0x3d, 0xfd, 0x04, 0x18, 0x8d, 0x1a, 0x99, 0xe0, 0xae, 0x0c,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe5, 0x62, 0xf1, 0xc9, 0x2c, 0x2e, 0x11, 0x92,
	0x40, 0x76, 0x07, 0xb2, 0xbf, 0xa5, 0xa4, 0x70, 0xbb, 0x50, 0x89, 0xb7, 0xe9, 0xf2, 0x93, 0xc9,
	0x4c, 0xec, 0x42, 0xac, 0xfa, 0x65, 0x06, 0xfa, 0x05, 0x06, 0x8c, 0x42, 0x3e, 0x5c, 0xcc, 0xee,
	0xa9, 0x25, 0x42, 0xa2, 0xc8, 0x7a, 0xe0, 0xa1, 0x86, 0xd7, 0x28, 0x21, 0xb0, 0x51, 0x3c, 0x42,
	0x5c, 0x60, 0xa3, 0xf4, 0xab, 0x33, 0x53, 0x6a, 0x85, 0x82, 0xb8, 0xd8, 0x42, 0x0b, 0x52, 0x12,
	0x4b, 0x52, 0x85, 0xf0, 0xe8, 0x94, 0xc2, 0x6e, 0x99, 0x92, 0x28, 0xd8, 0x40, 0x7e, 0x29, 0x24,
	0x03, 0xad, 0x18, 0xb5, 0x92, 0xd8, 0xc0, 0xb1, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x61,
	0xac, 0x88, 0x52, 0x18, 0x02, 0x00, 0x00,
}

Overview of Gomobile and GRPC
GoJakarta Meetup - March 2016

Kenneth Shaw
ken@knq.io

29 Mar 2016

Tags: go, golang, gomobile, grpc, overview

* GoJakarta Meetup Info
- Thank you to [[http://www.gepi.co/][GEPI]] for hosting
- GoJakarta is a new meetup focused on Golang, but will also incorporate other topics not directly related to Go such as deploying Go apps to the cloud
- Slides available at [[https://github.com/kenshaw/go-jakarta][github.com/kenshaw/go-jakarta]]
- Looking for someone (besides myself) who is also interested in doing a presentation!
- Contact me [[mailto:ken@knq.io][ken@knq.io]] if you would like to do a presentation, or have a suggestion for a topic, or have a location
- Next Meetup: April 21st, topic/location: TBD
- After presentation: let's network and grab food/coffee/etc @ JJ Royal in Lotte Shopping Avenue downstairs

* Gomobile
- [[https://github.com/golang/go/wiki/Mobile][Gomobile]] is a tool for building and running mobile apps written in Go
- Currently builds (and works well!) on iOS and Android
- Possibly will be expanded to Windows Phones in the future
- Allows for rapid cross-platform development and at native speed, interacting directly with Java or ObjC/Swift code
- Installation:
    go get -u golang.org/x/mobile/cmd/gomobile
    gomobile init
- Note: needs Go1.5+; also iOS can only be built from OS X, as Xcode is needed

* GRPC
- [[http://www.grpc.io/][GRPC]] is a high performance, next generation RPC framework designed and built by Google
- Has bindings available for (almost) all programming languages
- Built on top of HTTP/2 and was specifically designed to be highly performant on mobile networks
- Is bi-directional and supports streaming API calls
- Messages are well defined through an IDL (Protocol Buffers), are binary and compressed (ie low-bandwidth), and support forwards/backwards compatibility
- Extensions are available that will easily expose the RPC methods via JSON or other mechanisms
- Perfect for building fast/efficient/secure APIs for mobile apps

* Example
- Simple GRPC service example:
.code src/hello.proto

* Protocol Buffers
- RPC methods / types are defined via an interface description language (IDL), which for GRPC is Google's [[https://developers.google.com/protocol-buffers/docs/proto3][Protocol Buffers v3]] ("protobuf")
- Unfortunately, must be manually installed:
.code src/protobuf.sh
- Protobuf syntax is like a mini-programming language, supports things such as ENUMs, custom types, etc.

* Working with Protocol Buffers
- Service and Message definitions are defined in `.proto` files and are compiled into the target language code using the `protoc` compiler:
    protoc --go_out=plugins=grpc:. hello.proto
- That will create a `hello.pb.go` file that contains all the Go code needed to interact with the GRPC service(s) defined in `hello.proto`
- Various plugins exist for the `protoc` compiler that provide extensions such as compiling JSON support for a target language, etc.
- Very easy to write extension if needed

* Using the Generated GRPC Services
- In Go, simply import the generated package:
.code src/cmd/server/server.go /\/\/ import/,/^\)/

* A Simple Go Server Example
- Create a type (ie, `HelloServer`) and make sure it conforms with the service `interface` defined in the `hello.pb.go`:
.code src/cmd/server/server.go /^type HelloServer/,/^}/

* A Simple Go Server Example (cont'd)
- Then run the service:
.code src/cmd/server/server.go /^func main/,/^}/

* A Simple Go Client Example
.code src/cmd/client/client.go /^func main/,/^}/

* Other Notes on GRPC
- Protobuf also supports annotations ("options") in `proto` files: 
.code src/profile.proto /^service ProfileService/,/^}/

* Other Notes on GRPC (cont'd)
- Annotations can be used with other tools, such as [[https://github.com/gogo/letmegrpc][gogo letmegrpc]] (web form generator)
- [[https://github.com/gengo/grpc-gateway][grpc-gateway]] provides a simple way to generate JSON->GRPC Go API calls for backwards compatability
- Google internally uses a similar approach for its APIs
- Streaming is really really cool, but we don't have enough time to cover it tonight

* Gomobile
- [[https://github.com/golang/go/wiki/Mobile][Gomobile]] is a tool for building and running mobile apps written in Go
- Currently builds (and works well!) on iOS and Android
- Possibly will be expanded to Windows Phones in the future
- Allows for rapid cross-platform development and at native speed, interacting directly with Java or ObjC/Swift code
- Installation:
    go get -u golang.org/x/mobile/cmd/gomobile
    gomobile init
- Note: needs Go1.5+; also iOS can only be built from OS X, as Xcode is needed

* Using Go Code in Mobile App
- Two step process
- Write Go code that that conforms to the supported export types of Gomobile, and write Java/ObjC code to interact with it
- Use '`gomobile bind`' to generate native code:
    gomobile bind -target android github.com/kenshaw/go-jakarta/02-gomobile-and-grpc/src/helloclient
    gomobile bind -target ios github.com/kenshaw/go-jakarta/02-gomobile-and-grpc/src/helloclient
- That's it!

* Example GRPC Code Used with Gomobile
.code src/helloclient/helloclient.go /^\/\/ A wrapper/,/^}/
.code src/helloclient/helloclient.go /^\/\/ New/,/^}/

* Example GRPC Code Used with Gomobile (cont'd)
.code src/helloclient/helloclient.go /^\/\/ New/,/^}/

* Linking Go code with Android code
- Use the Gradle Android `gobind` plugin
- Create `AndroidApp/helloclient/build.gradle`
.code src/AndroidApp/helloclient/build.gradle

* Linking Go code with Android code (cont'd)
- Add project dir to `AndroidApp/settings.gradle`:
.code src/AndroidApp/settings.gradle
- In `AndroidApp/build.gradle`, add:
.code src/AndroidApp/build.gradle /^dependencies/,/^}/

* Importing Go code to Java/Android 
- Import the generated package:
.code src/AndroidApp/src/main/java/com/AndroidApp/Main.java /^\/\/ IMPORT/,/^\/\/ END/
- Note: Sorry! -- this is bad naming on my part!

* Calling Go code from Java/Android
.code src/AndroidApp/src/main/java/com/AndroidApp/Main.java /^\/\/ CLICK/,/^\/\/ END/

* Demo: App in Action

* Let's eat! 
- Meet downstairs in 15 minutes
- JJ Royal @ Lotte Shopping Avenue
